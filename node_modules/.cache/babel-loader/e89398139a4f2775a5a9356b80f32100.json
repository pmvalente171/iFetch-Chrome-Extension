{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _classCallCheck from \"C:/Users/olive/Uni/Projects/ifetch-chatApplication/chat_application/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/olive/Uni/Projects/ifetch-chatApplication/chat_application/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/olive/Uni/Projects/ifetch-chatApplication/chat_application/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/olive/Uni/Projects/ifetch-chatApplication/chat_application/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _EventSubscription from './_EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nvar EmitterSubscription = /*#__PURE__*/function (_EventSubscription2) {\n  _inherits(EmitterSubscription, _EventSubscription2);\n  var _super = _createSuper(EmitterSubscription);\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  function EmitterSubscription(emitter, subscriber, listener, context) {\n    var _this;\n    _classCallCheck(this, EmitterSubscription);\n    _this = _super.call(this, subscriber);\n    _this.emitter = emitter;\n    _this.listener = listener;\n    _this.context = context;\n    return _this;\n  }\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  _createClass(EmitterSubscription, [{\n    key: \"remove\",\n    value: function remove() {\n      this.emitter.removeSubscription(this);\n    }\n  }]);\n  return EmitterSubscription;\n}(_EventSubscription);\nexport default EmitterSubscription;","map":{"version":3,"names":["_EventSubscription","EmitterSubscription","emitter","subscriber","listener","context","removeSubscription"],"sources":["C:/Users/olive/Uni/Projects/ifetch-chatApplication/chat_application/node_modules/react-native-web/dist/vendor/react-native/emitter/_EmitterSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n */\n'use strict';\n\nimport _EventSubscription from './_EventSubscription';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends _EventSubscription {\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(emitter, subscriber, listener, context) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of _EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n\n\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n\n}\n\nexport default EmitterSubscription;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAAC;AAAA;AAAA;AAAA;AAEb,OAAOA,kBAAkB,MAAM,sBAAsB;;AAErD;AACA;AACA;AAFA,IAGMC,mBAAmB;EAAA;EAAA;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,6BAAYC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAAA;IAAA;IAClD,0BAAMF,UAAU;IAChB,MAAKD,OAAO,GAAGA,OAAO;IACtB,MAAKE,QAAQ,GAAGA,QAAQ;IACxB,MAAKC,OAAO,GAAGA,OAAO;IAAC;EACzB;EACA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAQA,kBAAS;MACP,IAAI,CAACH,OAAO,CAACI,kBAAkB,CAAC,IAAI,CAAC;IACvC;EAAC;EAAA;AAAA,EA3B+BN,kBAAkB;AA+BpD,eAAeC,mBAAmB"},"metadata":{},"sourceType":"module"}