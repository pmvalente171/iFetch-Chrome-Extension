[{"C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\index.js":"1","C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\reportWebVitals.js":"2","C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\App.js":"3"},{"size":534,"mtime":1666701885459,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1666615361799,"results":"6","hashOfConfig":"5"},{"size":6845,"mtime":1667996566131,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1edcdk4",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\index.js",[],[],"C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\reportWebVitals.js",[],[],"C:\\Users\\olive\\Uni\\Projects\\ifetch-chatApplication\\chat_application\\src\\App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35"],[],"/*global chrome*/\nimport logo from './logo.svg'\nimport './App.css'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { StyleSheet, ScrollView, SafeAreaView, StatusBar, View, Text } from 'react-native';\n// import {useSettingsStore} from '../common/settings'\n\n\nconst DUMMY_DATA = [\n  {\n    provider_id : \"user\",\n    utterance : \"Hi!\"\n  },\n  {\n    provider_id : \"iFetch\",\n    utterance : \"Hi! My name is iFetch, how can I help you?\"\n  }\n]\n\nconst IMAGES_ENDPOINT = \"https://large.novasearch.org/farfetch_products/images/\"\nconst MESSAGES_ENDPOINT = \"https://ifetch.novasearch.org/agent/\"\n\nfunction Recomenadation(props) {\n  const recommendations = props.message.recommendations\n  const hasRecommendations = false\n\n  const [img, setImg] = useState()\n  const [index, setIndex] = useState(0)\n\n  const clamp = (num, min, max) => Math.min(Math.max(num, min), max)\n  const fetchImage = async (imageUrl) => {\n    const res = await fetch(imageUrl)\n    const imageBlob = await res.blob()\n    const imageObjectURL = URL.createObjectURL(imageBlob)\n    setImg(imageObjectURL)\n    return imageObjectURL\n  }\n\n  // useEffect(() => {\n  //   fetchImage(0)\n  // })\n\n  // console.log(props.message)\n  // if (recommendations.length != 0) {\n  //   fetchImage(recommendations[0].image_path)\n  //   hasRecommendations = true\n  // }\n\n  var click = (dir) => {\n    // console.log(\"çlkjnlsdfjkhgbklujdfgv\")\n    //  clamp(index + (dir * 1), 0, recommendations.length - 1)\n    setIndex(clamp(index + (dir * 1), 0, recommendations.length - 1))\n  }\n\n  return (\n    <div className='landscape-view'>\n      <button className={index == 0 ? \"invisible-button\" : \"regular-arrows\"} onClick={() =>{\n        click(-1)\n      }}>{\"<\"}</button>\n      <img src={(recommendations[index].image_path)} style={{ alignSelf: 'center' }} />\n      <button className={index == recommendations.length - 1 ? \"invisible-button\" : \"regular-arrows\"} onClick={() =>{\n        click(1)\n      }}>{\">\"}</button>\n    </div>\n  )\n}\n\nfunction Message(props) {\n  const ref = useRef()\n\n  var message = props.message\n  var is_user = props.message.provider_id != \"iFetch\"\n  var recommendations = message.recommendations\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.scrollIntoView({ behavior: \"smooth\", block: \"end\" });\n    }\n  }, []);\n\n  return (\n    <div className={is_user ? 'message-user' : 'message-bot'} ref={ref}>\n      <div className={is_user ? 'message-content-user' : 'message-content-bot'}>\n        {message.utterance}\n      </div>\n      {recommendations.length != 0 ? <Recomenadation message = {message}/> : <></>}\n      <div className={is_user ? 'message-timestamp-user' : 'message-timestamp-bot'}>\n        {message.provider_id}\n      </div>\n    </div>\n  )\n}\n\nfunction Messages(props) {\n  return (\n    <ScrollView contentContainerStyle={{ flexGrow: 1}}>\n      {props.messages.map((message, i) => {\n        return (\n          <View key={message.provider_id + i}>\n            <Message message={message}/>\n          </View>\n        )\n      })}\n    </ScrollView>\n  )\n}\n\nfunction SendMessageForm (props) {\n  const [message, setMessage] = useState(\"\")\n  \n  var handleChange = (e) => {\n    setMessage(e.target.value) // TODO: Fix this!!!\n    // props.handleChange(value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.handleSubmit(message)\n    setMessage(\"\")\n  }\n\n  return (\n    <form\n      onSubmit={handleSubmit}>\n      <input\n        className='text-form'\n        onChange={handleChange}\n        value={message}\n        placeholder=\"Type your message and hit ENTER\"\n        type=\"text\"/>\n    </form>\n  )\n}\n\nasync function SendMessage (\n  utterance, userId, sessionId,\n  userAction, selectedId, \n  respondeCallback, isUpToDate=false) {\n\n  const response = await fetch(MESSAGES_ENDPOINT, {\n    method: \"POST\",\n    body: JSON.stringify({\n      utterance : utterance,\n      user_id : userId, // TODO: Randomize\n      session_id: sessionId, // TODO: Randomize\n      user_action: userAction,\n      interface_selected_product_id: selectedId \n    }),\n    headers: {\n      \"Content-type\": \"application/json\"\n    },\n    }).then((response) => response.json())\n    .then((data) => {\n      console.log(data)\n      respondeCallback(data, utterance, isUpToDate)\n    })\n    .catch((err) => {\n      console.log(err.message)\n    })\n\n    return response\n}\n\nfunction randomNumberInRange(min, max) {\n  // 👇️ get number between min (inclusive) and max (inclusive)\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction App() {\n  const [messages, setMessages] = useState([])\n  const [userID, setUserID] = useState(`${randomNumberInRange(0, 10000)}`)\n  const [sessionID, setSessionID] = useState(`${randomNumberInRange(0, 10000)}`)\n\n  const sendTestMessage = () => {\n    const message = {\n        // from: Sender.React,\n        message: \"Hello from React\",\n        uID: userID,\n        sID: sessionID\n    }\n\n    const queryInfo = {\n        active: true,\n        currentWindow: true\n    };\n\n    chrome.tabs && chrome.tabs.query(queryInfo, tabs => {\n        const currentTabId = tabs[0].id;\n        chrome.tabs.sendMessage(\n            currentTabId,\n            message,\n            (response) => {\n                // setResponseFromContent(response);\n                console.log(response)\n            });\n      });\n  };\n\n  const handleSubmit = (message) => {\n    // if (!hasResponded) return\n    // console.log(settings)\n    const temp = {\n      provider_id : \"user\",\n      utterance : message,\n      recommendations : []\n    }\n\n    setMessages([...messages, temp])\n    SendMessage(message, userID, sessionID, \"\", \"\", recieveMessage)\n  }\n\n  const recieveMessage = (message, utterance, isUpToDate=false) => {\n    // if (!message.has_response) return\n    \n    const temp1 = {\n      provider_id : \"iFetch\",\n      utterance : message.response,\n      recommendations : message.recommendations == null ? [] : message.recommendations\n    }\n\n    if (isUpToDate) {\n      setMessages([...messages, temp1])\n      return\n    }\n\n    const temp2 = {\n      provider_id : \"user\",\n      utterance : utterance,\n      recommendations : []\n    }\n\n    setMessages([...messages, temp2, temp1])\n    // console.log(messages)\n  }\n\n  useEffect(() => {\n    const response = SendMessage(\"Hi!\", userID, sessionID, \"\", \"\", recieveMessage, true)\n    sendTestMessage()\n  }, [])\n\n  return (\n    <div className='chat-container'>\n      <div className='title-container'>\n        <h1 className='message-content-bot'>iFetch</h1>\n      </div>\n      <View style={styles.container}>\n        <Messages messages={messages}/>\n      </View>\n      <div className='form-container'>\n        <SendMessageForm handleSubmit = {handleSubmit}/>\n      </div>\n    </div>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop:\"20px\",\n    flex: 1,\n    height: \"350px\"\n  }\n});\n\nexport default App;\n",{"ruleId":"36","severity":1,"message":"37","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":5,"column":34,"nodeType":"38","messageId":"39","endLine":5,"endColumn":46},{"ruleId":"36","severity":1,"message":"41","line":5,"column":48,"nodeType":"38","messageId":"39","endLine":5,"endColumn":57},{"ruleId":"36","severity":1,"message":"42","line":5,"column":65,"nodeType":"38","messageId":"39","endLine":5,"endColumn":69},{"ruleId":"36","severity":1,"message":"43","line":9,"column":7,"nodeType":"38","messageId":"39","endLine":9,"endColumn":17},{"ruleId":"36","severity":1,"message":"44","line":20,"column":7,"nodeType":"38","messageId":"39","endLine":20,"endColumn":22},{"ruleId":"36","severity":1,"message":"45","line":25,"column":9,"nodeType":"38","messageId":"39","endLine":25,"endColumn":27},{"ruleId":"36","severity":1,"message":"46","line":27,"column":10,"nodeType":"38","messageId":"39","endLine":27,"endColumn":13},{"ruleId":"36","severity":1,"message":"47","line":31,"column":9,"nodeType":"38","messageId":"39","endLine":31,"endColumn":19},{"ruleId":"48","severity":1,"message":"49","line":57,"column":32,"nodeType":"50","messageId":"51","endLine":57,"endColumn":34},{"ruleId":"52","severity":1,"message":"53","line":60,"column":7,"nodeType":"54","endLine":60,"endColumn":88},{"ruleId":"48","severity":1,"message":"49","line":61,"column":32,"nodeType":"50","messageId":"51","endLine":61,"endColumn":34},{"ruleId":"48","severity":1,"message":"55","line":72,"column":43,"nodeType":"50","messageId":"51","endLine":72,"endColumn":45},{"ruleId":"48","severity":1,"message":"55","line":86,"column":31,"nodeType":"50","messageId":"51","endLine":86,"endColumn":33},{"ruleId":"36","severity":1,"message":"56","line":171,"column":18,"nodeType":"38","messageId":"39","endLine":171,"endColumn":27},{"ruleId":"36","severity":1,"message":"57","line":172,"column":21,"nodeType":"38","messageId":"39","endLine":172,"endColumn":33},{"ruleId":"36","severity":1,"message":"58","line":237,"column":11,"nodeType":"38","messageId":"39","endLine":237,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":239,"column":6,"nodeType":"61","endLine":239,"endColumn":8,"suggestions":"62"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'SafeAreaView' is defined but never used.","'StatusBar' is defined but never used.","'Text' is defined but never used.","'DUMMY_DATA' is assigned a value but never used.","'IMAGES_ENDPOINT' is assigned a value but never used.","'hasRecommendations' is assigned a value but never used.","'img' is assigned a value but never used.","'fetchImage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '!==' and instead saw '!='.","'setUserID' is assigned a value but never used.","'setSessionID' is assigned a value but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recieveMessage', 'sendTestMessage', 'sessionID', and 'userID'. Either include them or remove the dependency array.","ArrayExpression",["63"],{"desc":"64","fix":"65"},"Update the dependencies array to be: [recieveMessage, sendTestMessage, sessionID, userID]",{"range":"66","text":"67"},[6324,6326],"[recieveMessage, sendTestMessage, sessionID, userID]"]